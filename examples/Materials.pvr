<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="Materials" name_space="Scene" name_suffix="2" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="2" persistency="666" pickable="0" type="Object" visible="4294967295">
      <Object ambient="1 1 1 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="directional" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1.79769e+308 1.79769e+308 1.79769e+308 -1.79769e+308 -1.79769e+308 -1.79769e+308 1" specular="1 1 1 1" type="Light" visible="4294967295">
        <Object at="-1 -1 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="4294967295">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <constraint persistency="666"/>
        </Object>
        <Object accept_root="1" aspect="1" at="0 0 0" at_dir="0" base_name="Default" camType="perspective" far="512" fov="1.0472" from="0.385136 1.65546 4.13656" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="4294967295">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="bumpmapFP" group="bumpmap" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
uniform sampler2D diffuseTexture;
uniform sampler2D normalTexture;
	
varying vec3 lightVec;
varying vec3 halfVec;

vec3 normal;
vec4 color;

void applyLightning() {
	float NdotL = max(dot(lightVec, normal), 0.0);
	float NdotHV = max (dot (halfVec, normal), 0.0);
	vec4 ambient  = gl_FrontMaterial.ambient * gl_LightSource[0].ambient * color;
	vec4 diffuse  = gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse * NdotL * color;
	vec4 specular = gl_FrontMaterial.specular * gl_LightSource[0].specular * pow( NdotHV, gl_FrontMaterial.shininess );
	gl_FragColor = ambient + diffuse + specular;	
}

void main() {
	color = texture2D (diffuseTexture, gl_TexCoord[0].st);
	
	// lookup normal from normal map, move from [0,1] to  [-1, 1] range, normalize
	normal = 2.0 * texture2D (normalTexture, gl_TexCoord[0].st*3.0).rgb - 1.0;
	normal = normalize (normal);
	
	applyLightning();
}	
</core>
    </Script>
    <Script base_name="bumpmapVP" group="bumpmap" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
attribute vec4 osg_Vertex;
attribute vec3 osg_Normal;
attribute vec4 osg_MultiTexCoord0;

varying vec3 lightVec;
varying vec3 halfVec;
	
void main() {
	gl_TexCoord[0] = osg_MultiTexCoord0;
	
	// Building the matrix Eye Space -&gt; Tangent Space
	vec3 n = normalize (gl_NormalMatrix * osg_Normal);
	vec3 t = vec3(n[0],-n[2],n[1]);
	vec3 b = cross (n, t);
	t = cross(b,n);
	
	vec3 vertexPosition = vec3(gl_ModelViewMatrix *  osg_Vertex);
	vec3 lightDir = normalize(gl_LightSource[0].position.xyz); // directional light source
	//vec3 lightDir = normalize(gl_LightSource[0].position.xyz - vertexPosition); // point light source
		
	// transform light and half angle vectors by tangent basis
	vec3 v;
	v.x = dot(lightDir, t);
	v.y = dot(lightDir, b);
	v.z = dot(lightDir, n);
	lightVec = normalize(v);
	
	vertexPosition = normalize(vertexPosition);
	vec3 halfVector = normalize(gl_LightSource[0].halfVector.xyz);
	v.x = dot (halfVector, t);
	v.y = dot (halfVector, b);
	v.z = dot (halfVector, n);
	halfVec = v;
	
	gl_Position = gl_ModelViewProjectionMatrix * osg_Vertex;
}
</core>
    </Script>
    <Script base_name="displacementFP" group="displacementmap" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 400 compatibility

uniform sampler2D tex;
const ivec3 off = ivec3(-1,0,1);

in float height;
in vec3 teNormal;
in float texelLength;

vec3 normal;
vec4 color;

void applyLightning() {
	vec3 lightVec = normalize(gl_LightSource[0].position.xyz);
	vec3 halfVec = normalize(gl_LightSource[0].halfVector.xyz);
	float NdotL = max(dot(lightVec, normal), 0.0);
	float NdotHV = max (dot (halfVec, normal), 0.0);
	vec4 ambient  = gl_FrontMaterial.ambient * gl_LightSource[0].ambient * color;
	vec4 diffuse  = gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse * NdotL * color;
	vec4 specular = gl_FrontMaterial.specular * gl_LightSource[0].specular * pow( NdotHV, gl_FrontMaterial.shininess );
	gl_FragColor = ambient + diffuse + specular;
}

vec3 computeNormal() {
	vec2 tc = gl_TexCoord[0].xy;
    float s11 = texture(tex, tc).r;
    float s01 = textureOffset(tex, tc, off.xy).r;
    float s21 = textureOffset(tex, tc, off.zy).r;
    float s10 = textureOffset(tex, tc, off.yx).r;
    float s12 = textureOffset(tex, tc, off.yz).r;
    
    vec3 va = normalize(vec3(texelLength, 0.0 ,s21-s01));
    vec3 vb = normalize(vec3(0.0, texelLength ,s12-s10));
    vec3 norm = cross(va,vb);
    
	// Building the matrix Eye Space -&gt; Tangent Space
	vec3 n = normalize(gl_NormalMatrix * teNormal);
	vec3 t = vec3(n[0],-n[2],n[1]);
	vec3 b = cross (n, t);
	t = cross(b,n);
	
	vec3 v;
	v.x = dot(norm, -b);
	v.y = dot(norm, t);
	v.z = dot(norm, n);
	return normalize(v);
}

vec4 mixColor(vec4 c1, vec4 c2, float t) {
	t = clamp(t, 0.0, 1.0);
	return mix(c1, c2, t);
}

vec4 getColor() {
	vec4 green = vec4(0.2,0.5,0.2,1.0);
	vec4 black = vec4(0.0,0.0,0.0,1.0);
	vec4 brown = vec4(0.6,0.5,0.2,1.0);
	vec4 grey  = vec4(0.7,0.7,0.7,1.0);
	vec4 white = vec4(1.0,1.0,1.0,1.0);
	
	float h = height*2.0;
	if (h &gt; 1.2) return mixColor(grey, white, 10*(h-1.2));
	if (h &gt; 1.0 &amp;&amp; h &lt;= 1.2) return mixColor(brown, grey, 5*(h-1.0));
	if (h &gt; 0.8 &amp;&amp; h &lt;= 1.0) return mixColor(green, brown, 5*(h-0.8));
	if (h &lt;= 0.8) return mixColor(black, green, 1.25*h);
	return black;
}

// TODO: fix lightning
void main( void ) {
	normal = computeNormal();
	color = getColor();
	
	/* diffuse lightning
	vec3 lightDir = normalize(gl_LightSource[0].position.xyz);
	vec4 aCol = vec4(c * 0.4, 1.0f);
	float dFac = dot(n, lightDir);
	vec4 dCol = vec4(c * 0.6 * dFac, 1.0f);	
	gl_FragColor = aCol+dCol;*/
	
	applyLightning();
}
</core>
    </Script>
    <Script base_name="displacementTCP" group="displacementmap" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 400 compatibility
#extension GL_ARB_tessellation_shader : enable

in vec3 vNormal[];

layout(vertices = 4) out;
out vec3 tcPosition[];
out vec3 tcNormal[];
out vec2 tcTexCoords[];

#define ID gl_InvocationID

#define res 16

void main() {
    tcPosition[ID] = gl_in[ID].gl_Position.xyz;
    tcNormal[ID] = vNormal[ID];
    tcTexCoords[ID] = gl_in[ID].gl_TexCoord[0].xy;
    
    if (ID == 0) {		
        gl_TessLevelInner[0] = res;
        gl_TessLevelInner[1] = res;
        
        gl_TessLevelOuter[0] = res;
        gl_TessLevelOuter[1] = res;
        gl_TessLevelOuter[2] = res;
        gl_TessLevelOuter[3] = res;
    }
}
</core>
    </Script>
    <Script base_name="displacementTEP" group="displacementmap" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 400 compatibility
#extension GL_ARB_tessellation_shader : enable

layout( quads ) in;
in vec3 tcPosition[];
in vec3 tcNormal[];
in vec2 tcTexCoords[];

out float height;
out vec3 teNormal;
out float texelLength;

uniform sampler2D texture;
uniform int scale;
uniform int offset;

void main() {
    float u = gl_TessCoord.x; 
    float v = gl_TessCoord.y;
    
    vec2 ta = mix(tcTexCoords[0], tcTexCoords[1], u);
    vec2 tb = mix(ta, tcTexCoords[2], v);
    gl_TexCoord[0] = vec4(tb.x, tb.y, 1.0, 1.0);
	
    vec3 a = mix(tcPosition[0], tcPosition[1], u);
    vec3 tePosition = mix(a, tcPosition[2], v);
    
    a = mix(tcNormal[0], tcNormal[1], u);
    teNormal = mix(a, tcNormal[2], v);
    
    height = texture2D(texture, gl_TexCoord[0].xy).g;
    float displacement = (offset + height*scale)*0.01;
    tePosition += teNormal*displacement;
    
    float L = length(tcPosition[1] - tcPosition[0]) + length(tcPosition[2] - tcPosition[0]);
    float T = length(tcTexCoords[1] - tcTexCoords[0]) + length(tcTexCoords[2] - tcTexCoords[0]);
    texelLength = 0.5*T/L;
    
    gl_Position = gl_ModelViewProjectionMatrix * vec4(tePosition, 1);
}
</core>
    </Script>
    <Script base_name="displacementVP" group="displacementmap" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
#version 120

attribute vec4 osg_Vertex;
attribute vec3 osg_Normal;
attribute vec2 osg_MultiTexCoord0;

varying vec3 vNormal;

void main(void) {
    gl_TexCoord[0] = vec4(osg_MultiTexCoord0,0.0,0.0);
    vNormal = osg_Normal;
	gl_Position = osg_Vertex;
}
</core>
    </Script>
    <Script base_name="envmapFP" group="envmap" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
uniform sampler2D diffuseTexture;
uniform sampler2D normalTexture;
uniform sampler2D envTexture;
	
varying vec3 lightVec;
varying vec3 halfVec;

varying vec3 fragPos;
varying vec3 fragNorm;

vec3 normal;
vec4 color;

void applyLightning() {
	float NdotL = max(dot(lightVec, normal), 0.0);
	float NdotHV = max (dot (halfVec, normal), 0.0);
	vec4 ambient  = gl_FrontMaterial.ambient * gl_LightSource[0].ambient * color;
	vec4 diffuse  = gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse * NdotL * color;
	vec4 specular = gl_FrontMaterial.specular * gl_LightSource[0].specular * pow( NdotHV, gl_FrontMaterial.shininess );
	gl_FragColor = ambient + diffuse + specular;	
}

void main() {
	color = texture2D (diffuseTexture, gl_TexCoord[0].st);
	
	// lookup normal from normal map, move from [0,1] to  [-1, 1] range, normalize
	normal = 2.0 * texture2D (normalTexture, gl_TexCoord[0].st*3.0).rgb - 1.0;
	normal = normalize (normal);
	
	
	// Calculate the reflection vector
    //vec3 R = normalize(reflect(fragPos, normal));
    vec3 R = normalize(reflect(fragPos, vec3(0,0,1)));

    // Convert the reflection vector to spherical coordinates
    float theta = acos(R.y);
    float phi = atan(R.z, R.x);
    
    // Map spherical coordinates to texture coordinates
    float u = phi / (2.0 * 3.14159265) + 0.5;
    float v = theta / 3.14159265;

    // Sample the environment map
    vec4 envColor = texture2D(envTexture, vec2(u, v));

    // Output the color
    color = color*0.5 +  envColor*0.5;
	
	
	applyLightning();
	
	//gl_FragColor = vec4(u,v,1,1);
	//gl_FragColor = vec4(I.rgb,1);
}	
	
</core>
    </Script>
    <Script base_name="envmapVP" group="envmap" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="GLSL">
      <core>
attribute vec4 osg_Vertex;
attribute vec3 osg_Normal;
attribute vec4 osg_MultiTexCoord0;

varying vec3 lightVec;
varying vec3 halfVec;

varying vec3 fragPos;
varying vec3 fragNorm;
	
void main() {
	gl_TexCoord[0] = osg_MultiTexCoord0;
	
	// Building the matrix Eye Space -&gt; Tangent Space
	vec3 n = normalize (gl_NormalMatrix * osg_Normal);
	fragNorm = n;
	vec3 t = vec3(n[0],-n[2],n[1]);
	vec3 b = cross (n, t);
	t = cross(b,n);
	
	vec3 vertexPosition = vec3(gl_ModelViewMatrix *  osg_Vertex);
	vec3 lightDir = normalize(gl_LightSource[0].position.xyz); // directional light source
	//vec3 lightDir = normalize(gl_LightSource[0].position.xyz - vertexPosition); // point light source
		
	// transform light and half angle vectors by tangent basis
	vec3 v;
	v.x = dot(lightDir, t);
	v.y = dot(lightDir, b);
	v.z = dot(lightDir, n);
	lightVec = normalize(v);
	
	vec3 halfVector = normalize(gl_LightSource[0].halfVector.xyz);
	v.x = dot (halfVector, t);
	v.y = dot (halfVector, b);
	v.z = dot (halfVector, n);
	halfVec = v;
	
	// transform reflection vector
	v.x = dot(vertexPosition, t);
	v.y = dot(vertexPosition, b);
	v.z = dot(vertexPosition, n);
	fragPos = normalize(v);
	
	gl_Position = gl_ModelViewProjectionMatrix * osg_Vertex;
}
</core>
    </Script>
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('scene', 'light')
	
	VR.find('Default').setFrom([-2.0,0,4])
	VR.find('Default').setAt([0,0,0])

	def addObject(pos, mat, doIt):
		sphere = VR.Geometry('sphere')
		#sphere.setPrimitive('Sphere 0.4 3')
		#sphere.setPrimitive('Teapot 6 0.2')
		sphere.setPrimitive('Torus 0.2 0.3 32 32')
		sphere.setFrom(pos)
		sphere.rotate(-1.2, [1,1,1])
		sphere.setMaterial(mat)
		if doIt: VR.scene.addChild(sphere)
		return sphere
		
	# simple materials
	def simpleMaterial(diffuse, specular, ambient):
		mat = VR.Material('simple')
		mat.setDiffuse(diffuse)
		mat.setSpecular(specular)
		mat.setAmbient(ambient)
		return mat
	
	mat1 = simpleMaterial([0,0.4,0.7], [0,0,0], [0,0,0])
	mat2 = simpleMaterial([0,0.4,0.7], [1,1,1], [0,0,0])
	mat3 = simpleMaterial([0,0.4,0.7], [1,1,1], [0,0.2,0.4])
	addObject([-1, 1, 0], mat1, True)
	addObject([ 0, 1, 0], mat2, True)
	addObject([ 1, 1, 0], mat3, True)
	
	# textured materials
	def simpleNoise(color1, color2, size):
		tg = VR.TextureGenerator()
		tg.addSimpleNoise([size,size,1], False, color1, color2)
		return tg.compose(0)
		
	def makeCubeMap(sphere):
		cam = VR.find('Default')
		tr = VR.TextureRenderer()
		tr.setup(cam, 400, 400)
		tr.setActive(False)
		tr.addLink(VR.find('light'))
		
		"""
		l = VR.Light('tmpL')
		b = l.addBeacon()
		#b.setFrom([5,0,0])
		#cam.addChild(b)
		#l.addLink(sphere)
		tr.addChild(l)
		"""
		
		#VR.find('Root').addChild(tr)
		maps = tr.createCubeMaps(sphere)
		return maps
		
	mat4 = simpleMaterial([0.6,0.6,0.6], [1,1,1], [0.2,0.2,0.2])
	mat5 = simpleMaterial([0.6,0.6,0.6], [1,1,1], [0.2,0.2,0.2])
	mat6 = simpleMaterial([0.6,0.6,0.6], [1,1,1], [0.2,0.2,0.2])
	addObject([-1, 0, 0], mat4, True)
	addObject([ 1, 0, 0], mat5, True)
	S6 = addObject([ 0, 0, 0], mat6, True)
	
	mat7 = simpleMaterial([0.6,0.6,0.6], [1,1,1], [0.2,0.2,0.2])
	mat8 = simpleMaterial([0.6,0.6,0.6], [1,1,1], [0.4,0.4,0.4])
	S7 = addObject([-0.5,-1, 0], mat7, True)
	S8 = addObject([ 0.5,-1, 0], mat8, True)
	
	# simple texture
	noise1 = simpleNoise([0,0.9,1], [0,0.7,0.8], 512)
	mat4.setTexture(noise1)
	
	# metalic effect
	noise2 = simpleNoise([1,1,1], [0.5,0.5,0.5], 512)
	#mat5.setTexture(noise2)
	#mat5.addPass()
	#mat5.setTransparency(0.5)
	#mat5.setTextureType('SphereEnv')
	mat5.setVertexProgram('envmapVP')
	mat5.setFragmentProgram('envmapFP')
	bmt = VR.Image()
	bmt.read('bumpmap.jpg')
	mat5.setTexture(noise2)
	mat5.setTexture(bmt,1)
	mat5.setTexture('sphereEnv.png',2)
	mat5.setShaderParameter('diffuseTexture', 0)
	mat5.setShaderParameter('normalTexture', 1)
	mat5.setShaderParameter('envTexture', 2)
	
	# bumpmap
	bmt = VR.Image()
	bmt.read('bumpmap.jpg')
	mat7.setTexture(noise2)
	mat7.setTexture(bmt,1)
	mat7.setVertexProgram('bumpmapVP')
	mat7.setFragmentProgram('bumpmapFP')
	mat7.setShaderParameter('diffuseTexture', 0)
	mat7.setShaderParameter('normalTexture', 1)
	
	
	# displacement map
	noise3 = simpleNoise([1,1,1], [0,0,0], 128)
	mat8.setTexture(noise3)
	mat8.setVertexProgram('displacementVP')
	mat8.setFragmentProgram('displacementFP')
	#mat8.setGeometryProgram('displacementGP')
	mat8.setTessControlProgram('displacementTCP')
	mat8.setTessEvaluationProgram('displacementTEP')
	mat8.setShaderParameter('offset', -5)
	mat8.setShaderParameter('scale', 15)
	S8.convertToTrianglePatches()
	
	#return # TODO: fix cubemap
	
	# reflection (last to get environment with other spheres on it)
	#return
	def setupEnvMap():
		maps = makeCubeMap(S6)
		#mat6.setTexture(noise2)
		#mat6.addPass()
		mat6.setTextureType('CubeEnv')
		#mat6.setTransparency(0.5)
		for tex,side in zip(maps, ['front', 'back', 'left', 'right', 'top', 'bottom']):
			mat6.setCubeTexture(tex, side)
		S6.show()
		
	S6.hide()	
	VR.stackCall(setupEnvMap, 0.1)
		
		
			
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="2" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="1 1 1" format=".png" path="" persistency="666" showSplash="0" splashPath="" type="0"/>
  <Navigation persistency="666">
    <presetStates>
      <Orbit>1</Orbit>
    </presetStates>
  </Navigation>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
