<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="mecha_test" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="2" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="Headlight" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1.79769e+308 1.79769e+308 1.79769e+308 -1.79769e+308 -1.79769e+308 -1.79769e+308 1" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object accept_root="1" aspect="1" at="0.312005 0.0767456 0.138269" at_dir="0" base_name="Default" camType="perspective" far="250" fov="1.0472" from="0.855759 0.353968 -0.525739" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <attachments>
            <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
          </attachments>
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="Headlight" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
            <attachments>
              <Node base_name="transform" name_space="VRAttachment" name_suffix="0" persistency="666" value=""/>
            </attachments>
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	# root node and reset
	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Transform('scene', 'Headlight')

	VR.setupInterface()
	VR.setupGears()
	
	VR.stackCall( VR.sendSG, 2 )
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="13" persistency="666"/>
    </Script>
    <Script base_name="sendSG" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	if not hasattr(VR, 'sgCli'):
		VR.sgCli = VR.WebSocket()
		VR.sgCli.open('ws://localhost:6543')
		
	if not VR.sgCli.isConnected(): VR.sgCli.open('ws://localhost:6543')
	VR.sgCli.send('clear')
	
	print 'send SG to interface'
	
	for g in VR.scene.findAll('Gear'):
		name = g.getName()
		objID = str(g.getID())
		
		m = g.getMatrix()
		trans = ['0']*12
		
		trans[0] = str(m[0])
		trans[1] = str(m[1])
		trans[2] = str(m[2])
		trans[3] = str(m[4])
		trans[4] = str(m[5])
		trans[5] = str(m[6])
		trans[6] = str(m[7])
		trans[7] = str(m[8])
		trans[8] = str(m[10])
		
		trans[9] = str(m[12])
		trans[10] = str(m[13])
		trans[11] = str(m[14] + 0.5) # offset
		
		trans = ' '.join(trans)
		
		VR.sgCli.send('new|Geometry|'+name+'|'+objID)
		VR.sgCli.send('set|transform|'+objID+'|'+trans)
		
		mat = g.getMaterial()
		matID = str(mat.getID())
		VR.sgCli.send('new|Material|'+matID)
		VR.sgCli.send('set|material|'+name+'|'+matID)
		
		#red, green, blue, ambient, diffuse, specular, shininess, transparency, emission
		d = mat.getDiffuse()
		VR.sgCli.send('set|Material|'+matID+'|'+str(d[0])+' '+str(d[1])+' '+str(d[2])+' 0.2 0.8 0.3 0.1 1.0 0.0')
		
		
		
		gg = g.duplicate()
		gg.convertToTriangles()
		
		pos = gg.getPositions()
		norms = gg.getNormals()
		inds = gg.getIndices()
		
		pos = ' '.join( [ ' '.join([str(p[i]) for i in range(3)]) for p in pos ] )
		norms = ' '.join( [ ' '.join([str(p[i]) for i in range(3)]) for p in norms ] )
		inds = ' '.join( [ str(i) for i in inds ] )
		
		
		VR.sgCli.send('set|positions|'+name+'|'+pos)
		VR.sgCli.send('set|normals|'+name+'|'+norms)
		VR.sgCli.send('set|indices|'+name+'|'+inds)
		
</core>
    </Script>
    <Script base_name="sendUpdate" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	if not hasattr(VR, 'sgCli'): return
	if not VR.sgCli.isConnected(): VR.sgCli.open('ws://localhost:6543')
	
	for g in VR.scene.findAll('Gear'):
		name = g.getName()
		objID = str(g.getID())
		
		m = g.getMatrix()
		trans = ['0']*12
		
		trans[0] = str(m[0])
		trans[1] = str(m[1])
		trans[2] = str(m[2])
		trans[3] = str(m[4])
		trans[4] = str(m[5])
		trans[5] = str(m[6])
		trans[6] = str(m[7])
		trans[7] = str(m[8])
		trans[8] = str(m[10])
		
		trans[9] = str(m[12])
		trans[10] = str(m[13])
		trans[11] = str(m[14] + 0.5) # offset
		
		trans = ' '.join(trans)
		
		VR.sgCli.send('set|transform|'+objID+'|'+trans)

	
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" base_name="trigger" name_space="__global__" name_suffix="2" persistency="666"/>
    </Script>
    <Script base_name="setupGears" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR, math
	from VR.Math import Vec3
	
	if hasattr(VR, 'mechanism'): VR.mechanism.clear()
	else: VR.mechanism = VR.Mechanism()
	VR.scene.addChild(VR.mechanism)
	
	# primitives
	def addGear(params, mecha, Nt):
		p = VR.Geometry(params[0])
		s = ' '.join([str(i) for i in params])
		p.setPrimitive( s )
		p.setPickable(True)
		VR.scene.addChild(p)
		VR.mechanism.add(p)
		return p
		
	# parameters
	gp  = 0.02 # gear pitch
	cgN = 32   # teeth N 
	ar  = 0.01 # axle radius
	cgr = gp*cgN*0.5/math.pi # chain gear radius
		
	# pads
	VR.P1 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	VR.P2 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	VR.P3 = addGear(['Gear', 0.02, ar, gp, cgN, 0.01, 0], True, cgN)
	
	VR.P1.setColor('blue')
	VR.P2.translate([cgr*2,0,0])
	VR.P3.translate([cgr*2,-cgr*2,0])
		
	VR.mechanism.addMotor('M1', VR.P1, 1) # rad/s
	VR.mechanism.updateNeighbors()
	VR.mechanism.updateVisuals()

	
</core>
    </Script>
    <Script base_name="setupInterface" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	VR.interface = VR.ScenegraphInterface('interface')	
	VR.scene.getParent().addChild( VR.interface )	
	
	VR.interface.setPort(6543)
	print 'open SG interface on port', 6543
</core>
    </Script>
    <Script base_name="update" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
		
	if hasattr(VR, 'mechanism'):
		VR.setPhysicsActive(0)
		VR.mechanism.update()
		VR.setPhysicsActive(1)
		VR.mechanism.updateVisuals()
	
		
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" base_name="trigger" name_space="__global__" name_suffix="15" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" showSplash="0" splashPath="" type="0"/>
  <Navigation persistency="666">
    <presetStates>
      <Orbit>1</Orbit>
    </presetStates>
  </Navigation>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
