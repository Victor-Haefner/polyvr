cmake_minimum_required (VERSION 3.0)

#set( CMAKE_VERBOSE_MAKEFILE on )
#set(CMAKE_BUILD_TYPE Debug) # Warning! this will recompile everything!

project(PolyVR)

message( "Configuring for system name / version: " ${CMAKE_SYSTEM_NAME} " / " ${CMAKE_SYSTEM_VERSION} )

macro(addDefinition v1 v2)
     if(${v1})
         add_definitions( ${v2} )
     endif()
endmacro()

if("${CMAKE_SYSTEM_NAME}" STREQUAL "Emscripten")
	set(WASM ON)
endif()

if(WASM)
	unset(UNIX)
	message( " -> WASM variable set" )
endif()

set(versionScript "genVersion.sh")
if(WIN32)
	message( " -> WIN32 variable set" )
	set(versionScript "genVersion.bat")
endif()

add_custom_target(
    versionTarget
    COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/src/version/${versionScript}
)

if(LINUX)
	message( " -> LINUX variable set" )
	add_custom_target(cefResourceCopy)
	add_custom_command(TARGET cefResourceCopy PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/ressources/cef18/icudtl.dat ${CMAKE_BINARY_DIR})
	add_custom_command(TARGET cefResourceCopy PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/ressources/cef18/*.bin ${CMAKE_BINARY_DIR})
endif()

if(APPLE)
	message( " -> APPLE variable set" )
	add_custom_target(cefResourceCopy)
	add_custom_command(TARGET cefResourceCopy PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/ressources/cefMac/icudtl.dat ${CMAKE_BINARY_DIR})
	add_custom_command(TARGET cefResourceCopy PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/ressources/cefMac/*.bin ${CMAKE_BINARY_DIR})
  add_custom_command(TARGET cefResourceCopy PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/ressources/cefMac/*.dylib ${CMAKE_BINARY_DIR})
  add_custom_command(TARGET cefResourceCopy PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/ressources/cefMac/*.json ${CMAKE_BINARY_DIR})
endif()


if(NOT APPLE)
# Define the name of your library and specify its source files
add_library(freeglut SHARED)


# Optionally, set compile options and include directories for your library
#target_compile_options(freeglut PRIVATE -Wall -Wextra)  # Compiler options
target_include_directories(freeglut PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} "src/core/setup/windows/glut/freeglut/src" "src/core/setup/windows/glut/freeglut/include")  # Include directories
target_link_options(freeglut PRIVATE "/NODEFAULTLIB:freeglut.lib")


target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_callbacks.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_cursor.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_display.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_ext.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_font.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_font_data.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_gamemode.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_geometry.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_gl2.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_init.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_input_devices.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_joystick.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_main.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_menu.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_misc.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_overlay.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_spaceball.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_state.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_stroke_mono_roman.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_stroke_roman.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_structure.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_teapot.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_videoresize.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/fg_window.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/util/xparsegeometry_repl.c)

if(WIN32)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_cmap_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_cursor_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_display_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_ext_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_gamemode_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_init_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_input_devices_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_joystick_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_main_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_menu_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_spaceball_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_state_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_structure_mswin.c)
target_sources(freeglut PRIVATE src/core/setup/windows/glut/freeglut/src/mswin/fg_window_mswin.c)
endif() # win32
endif() # not apple


add_definitions( -D__USE_MISC=1 )
add_definitions( -DOSG_SILENT_SHUTDOWN=1 )

set(INCLUDE_DIRS "")
set(LIB_DIRS "")

if(WASM)
	# debugging flags:
	#  -g -s ASSERTIONS=1

	#set(LINKER_FLAGS "${LINKER_FLAGS} -s ALLOW_MEMORY_GROWTH=1 -s EXIT_RUNTIME=1 -s DISABLE_EXCEPTION_CATCHING=0 -g")
	set(LINKER_FLAGS "${LINKER_FLAGS} -s ALLOW_MEMORY_GROWTH=1 -s EXIT_RUNTIME=1 -s DISABLE_EXCEPTION_CATCHING=0 -s TOTAL_MEMORY=33554432")
	set(LINKER_FLAGS "${LINKER_FLAGS} -s MIN_WEBGL_VERSION=2 -s MAX_WEBGL_VERSION=2")
	set(LINKER_FLAGS "${LINKER_FLAGS} -s EXPORTED_RUNTIME_METHODS=['lengthBytesUTF8','stringToUTF8','UTF8ToString']")

	add_definitions( -DWASM=1 )
	add_definitions( -DGLUT_glut_LIBRARY=1 )
	add_definitions( -DGLUT_Xi_LIBRARY=1 )
	add_definitions( -DGLUT_Xmu_LIBRARY=1 )
	add_definitions( -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake )
	add_definitions( -DCMAKE_MODULE_PATH=../emsdk/upstream/emscripten/cmake/Modules )
endif()

if(WIN32)
	add_definitions( -DWIN32_LEAN_AND_MEAN=1 -D_WIN32_WINNT=0x0502 )
	set(DISK "C")
	if(EXISTS "D:/usr/vcpkg")
		set(DISK "D")
	endif()

	set(LIB_DIRS ${LIB_DIRS} "${DISK}:/usr/lib;${DISK}:/usr/vcpkg/installed/x64-windows/lib")
	set(INCLUDE_DIRS ${INCLUDE_DIRS} "${DISK}:/usr/vcpkg/installed/x64-windows/include")
	set(INCLUDE_DIRS ${INCLUDE_DIRS} "${DISK}:/usr/include")
	set(LINKER_FLAGS ${LINKER_FLAGS} wininet.lib dwmapi.lib cairo.lib)
endif()

# command to copy the freeglut dll, lib and header to /c/usr/
if(WIN32)
	#(TARGET freeglut POST_BUILD
	#    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/src/core/setup/windows/glut/freeglut/include/GL/* ${DISK}:/usr/vcpkg/installed/x64-windows/include/GL/
	#    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	#)
	add_custom_command(TARGET freeglut POST_BUILD
	    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/build/Release/freeglut.dll ${DISK}:/usr/vcpkg/installed/x64-windows/bin/
	    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	)
	add_custom_command(TARGET freeglut POST_BUILD
	    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/build/Release/freeglut.lib ${DISK}:/usr/vcpkg/installed/x64-windows/lib/
	    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	)
endif()

if(UNIX)
	add_definitions( -DBOOST_NO_COMPILER_CONFIG )
	add_definitions( -DBOOST_NO_CXX14_DECLTYPE_AUTO )
	add_definitions( -DBOOST_NO_CXX14_CONSTEXPR )
	add_definitions( -DBOOST_NO_CXX11_DECLTYPE_N3276 )
	add_definitions( -DBOOST_NO_CXX11_HDR_ATOMIC=1 )
	add_definitions( -DGL_GLEXT_PROTOTYPES )
	add_definitions( -DLINUX )

	set(LINKER_FLAGS "${LINKER_FLAGS} -lpthread")
endif()

function(FIND_ZLIB)
	if(UNIX)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lz" PARENT_SCOPE)
	endif()
	if(WASM)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../emsdk/upstream/emscripten/cache/ports/zlib/zlib-1.2.11" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lz" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} zlib PARENT_SCOPE)
	endif()
endfunction()

function(FIND_LIBXML)
	if(UNIX)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/usr/include/libxml2" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lxml2" PARENT_SCOPE)
	endif()
	if(WASM)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../include/libxml2" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lxml2" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} libxml2 PARENT_SCOPE)
	endif()
endfunction()

function(FIND_BOOST)
	if(LINUX)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lboost_system -lboost_program_options -lboost_serialization -lboost_filesystem" PARENT_SCOPE)
	endif()
	if(APPLE)
		find_package(Boost REQUIRED COMPONENTS system filesystem)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} ${Boost_INCLUDE_DIRS} PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lboost_system -lboost_program_options -lboost_serialization -lboost_filesystem" PARENT_SCOPE)
	endif()
	if(WASM)
		#set(INCLUDE_DIRS ${INCLUDE_DIRS} "../emsdk/upstream/emscripten/cache/ports/boost_headers" PARENT_SCOPE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../include/boost_headers" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lboost_system -lboost_program_options -lboost_serialization -lboost_filesystem" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "${DISK}:/usr/vcpkg/installed/x64-windows/include/boost" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} boost_system-vc140-mt boost_program_options-vc140-mt boost_serialization-vc140-mt boost_filesystem-vc140-mt boost_thread-vc140-mt PARENT_SCOPE)
	endif()
endfunction()

function(FIND_FREETYPE)
	if(LINUX)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/usr/include/freetype2" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lfreetype" PARENT_SCOPE)
	endif()
	if(APPLE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/opt/X11/include/freetype2" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/opt/homebrew/lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lfreetype" PARENT_SCOPE)
	endif()
	if(WASM)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../emsdk/upstream/emscripten/cache/sysroot/include/freetype2/freetype" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lfreetype" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} freetype PARENT_SCOPE)
	endif()
endfunction()

function(FIND_PYTHON)
	if(LINUX)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/usr/include/python2.7" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lpython2.7" PARENT_SCOPE)
	endif()
	if(APPLE)
		# TODO get pyenv root
		#set(INCLUDE_DIRS ${INCLUDE_DIRS} "${PYENV_PATH}/versions/2.7.18/include/python2.7" PARENT_SCOPE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/Users/victorhafner/.pyenv/versions/2.7.18/include/python2.7" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/Users/victorhafner/.pyenv/versions/2.7.18/lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lpython2.7" PARENT_SCOPE)
	endif()
	if(WASM)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../include/Python" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lpython2.7" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "${DISK}:/usr/vcpkg/installed/x64-windows/include/python2.7" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} python27 PARENT_SCOPE)
	endif()
endfunction()

#function(FIND_GLUT)
#	if(UNIX)
#		set(LINKER_FLAGS "${LINKER_FLAGS} -lglut -lGL -lGLU" PARENT_SCOPE)
#	endif()
#	if(WASM) # GLUT is wrapped for web assembly
#	endif()
#	if(WIN32)
#		set(LINKER_FLAGS ${LINKER_FLAGS} freeglut PARENT_SCOPE)
#	endif()
#endfunction()

function(FIND_OPENSG)
	if(LINUX)
		set(LIB_DIRS ${LIB_DIRS} "/usr/lib/opensg" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lOSGBase -lOSGContribTrapezoidalShadowMaps -lOSGCluster -lOSGDrawable -lOSGEffectGroups -lOSGFileIO -lOSGGroup -lOSGImageFileIO -lOSGState -lOSGSystem -lOSGUtil -lOSGText -lOSGWindow -lOSGWindowGLUT -lOSGWindowX" PARENT_SCOPE)
	endif()
	if(APPLE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/usr/local/include" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/usr/local/lib64" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lOSGBase -lOSGContribTrapezoidalShadowMaps -lOSGCluster -lOSGDrawable -lOSGEffectGroups -lOSGFileIO -lOSGGroup -lOSGImageFileIO -lOSGState -lOSGSystem -lOSGUtil -lOSGText -lOSGWindow -lOSGWindowCOCOA -framework Cocoa -framework OpenGL" PARENT_SCOPE)
	endif()
	if(WASM)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../include" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lOSGWindowGLUT -lOSGWindowWASM -lOSGWindow -lOSGSystem -lOSGUtil -lOSGDrawable -lOSGGroup -lOSGState -lOSGBase -lOSGFileIO -lOSGImageFileIO" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LIB_DIRS ${LIB_DIRS} "${DISK}:/usr/lib/opensg" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} OSGBase OSGContribTrapezoidalShadowMaps OSGCluster OSGDrawable OSGEffectGroups OSGGroup OSGImageFileIO OSGState OSGSystem OSGUtil OSGText OSGWindow OSGWindowGLUT PARENT_SCOPE)
	endif()
endfunction()

function(FIND_PNG)
	if(UNIX)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lpng" PARENT_SCOPE)
	endif()
	if(WASM)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../emsdk/upstream/emscripten/cache/ports/libpng/libpng-1.6.37" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lpng" PARENT_SCOPE)
	endif()
	if(WIN32)
	endif()
endfunction()

function(FIND_JPG)
	if(UNIX)
		set(LINKER_FLAGS "${LINKER_FLAGS} -ljpeg" PARENT_SCOPE)
	endif()
	if(WASM)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../emsdk/upstream/emscripten/cache/ports/libjpeg/jpeg-9c" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -ljpeg" PARENT_SCOPE)
	endif()
	if(WIN32)
	endif()
endfunction()

function(FIND_GDAL)
	if(UNIX)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -lgdal -lproj -ltiff -ltiffxx -lport -lsqlite3" PARENT_SCOPE)
	endif()
	if(WASM)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../include" "../include/libproj" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "../lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lgdal -lproj -ltiff -ltiffxx -lport -lsqlite3" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} gdal proj tiff PARENT_SCOPE)
	endif()
endfunction()

function(FIND_CGAL)
	if(UNIX)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -lmpir -lmpfr" PARENT_SCOPE)
	endif()
	if(WASM)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "../include" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(COMPILER_FLAGS ${COMPILER_FLAGS} /bigobj PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} mpfr gmp PARENT_SCOPE)
	endif()
endfunction()

function(FIND_IMGUI)
	if(UNIX)
	endif()
	if(WIN32)
		#set(INCLUDE_DIRS ${INCLUDE_DIRS} PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} imgui PARENT_SCOPE)
	endif()
endfunction()

function(FIND_BULLET)
	if(LINUX)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/snap/bullet/1/include/bullet" "/usr/include/bullet" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/snap/bullet/1/lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lBulletSoftBody -lBulletDynamics -lBulletCollision -lLinearMath" PARENT_SCOPE)
	endif()

	if(APPLE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/opt/homebrew/Cellar/bullet/3.25/include/bullet" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/opt/homebrew/Cellar/bullet/3.25/lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lBulletSoftBody -lBulletDynamics -lBulletCollision -lLinearMath" PARENT_SCOPE)
	endif()


	if(WIN32)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "${DISK}:/usr/vcpkg/installed/x64-windows/include/bullet" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} Bullet3Common  BulletCollision  BulletDynamics  BulletInverseDynamics  BulletSoftBody LinearMath PARENT_SCOPE)
	endif()
endfunction()

function(FIND_COLLADA)
	if(WIN32)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "${DISK}:/usr/include/Collada" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "${DISK}:/usr/lib/collada" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} collada-dom2.5-dp-vc100-mt colladadom141 PARENT_SCOPE)
		add_definitions( -DDOM_DYNAMIC )
	endif()
	if(APPLE)
    set(LIB_DIRS ${LIB_DIRS} "/usr/local/lib" PARENT_SCOPE)
    set(LINKER_FLAGS "${LINKER_FLAGS} -lcollada-dom2.5-dp" PARENT_SCOPE)
  endif()
endfunction()

function(FIND_CEF)
	if(LINUX)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/usr/include/CEF" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/usr/lib/CEF" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lcef -lcef_dll_wrapper" PARENT_SCOPE)
		add_definitions( -DCEF18 )
	endif()
	if(APPLE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/usr/local/include/cef" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/usr/local/lib/cef" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lcef_dll_wrapper -undefined dynamic_lookup" PARENT_SCOPE)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -lcef -lcef_dll_wrapper" PARENT_SCOPE)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -lcef_dll_wrapper -F/usr/local/lib/cef -framework \"Chromium Embedded Framework\"" PARENT_SCOPE)
		add_definitions( -DCEF18 )
	endif()
	if(WIN32)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "${DISK}:/usr/include/CEF" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "${DISK}:/usr/lib/cef" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} libcef_dll_wrapper shared libcef PARENT_SCOPE)
	endif()
endfunction()

function(FIND_OCE)
	if(UNIX)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -loce" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "${DISK}:/usr/include/OCE" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "${DISK}:/usr/lib/oce" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} TKV3d TKernel TKMath TKBRep TKGeomBase TKGeomAlgo TKG3d TKG2d TKShHealing TKTopAlgo TKMesh TKPrim TKBool TKBO TKFillet TKSTEP TKXSBase TKXCAF TKLCAF TKXDESTEP TKIGES TKOffset TKSTEPAttr TKSTEP209 TKSTEPBase PARENT_SCOPE)
	endif()
endfunction()

function(FIND_IFC)
	if(UNIX)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -lifc" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "${DISK}:/usr/include/IFC" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "${DISK}:/usr/lib/ifc" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} IfcGeom IfcParse boost_regex-vc140-mt PARENT_SCOPE)
	endif()
endfunction()

function(FIND_OPENVR)
	if(WIN32)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "${DISK}:/usr/include/OpenVR" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "${DISK}:/usr/lib/openvr" PARENT_SCOPE)
		set(LINKER_FLAGS ${LINKER_FLAGS} openvr_api64 glew32 PARENT_SCOPE)
	endif()
endfunction()

function(FIND_CURL)
	if(UNIX)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lcurl" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} libcurl PARENT_SCOPE)
	endif()
endfunction()

function(FIND_SSH)
	if(LINUX)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lssh2" PARENT_SCOPE)
	endif()
	if(APPLE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lssh" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} libssh2 PARENT_SCOPE)
	endif()
endfunction()

function(FIND_CRYPTOPP)
	if(UNIX)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -lcryptopp" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} cryptopp PARENT_SCOPE)
	endif()
endfunction()

function(FIND_AV)
	if(APPLE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/opt/homebrew/opt/openal-soft/include" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/opt/homebrew/opt/openal-soft/lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lopenal -lavformat -lavcodec -lswscale -lswresample -lavutil" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} OpenAL32 avformat avcodec swscale swresample avutil PARENT_SCOPE)
	endif()
endfunction()

function(FIND_LAPACKE)
	if(LINUX)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/usr/include/lapacke" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -llapacke -llapack" PARENT_SCOPE)
	endif()
	if(APPLE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/opt/homebrew/opt/lapack/include" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/opt/homebrew/opt/lapack/lib" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -llapacke -llapack" PARENT_SCOPE)
  	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} lapack openblas PARENT_SCOPE)
	endif()
endfunction()

function(FIND_EIGEN)
	if(APPLE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/opt/homebrew/var/homebrew/linked/eigen/include/eigen3" PARENT_SCOPE)
		#set(LIB_DIRS ${LIB_DIRS} "/opt/homebrew/var/homebrew/linked/eigen/lib" PARENT_SCOPE)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -leigen" PARENT_SCOPE)
  	endif()
endfunction()

function(FIND_FFTW)
	if(UNIX)
		set(LINKER_FLAGS "${LINKER_FLAGS} -lfftw3" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} fftw3 PARENT_SCOPE)
	endif()
endfunction()

function(FIND_OMP)
	if(APPLE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/opt/homebrew/opt/libomp/include" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/opt/homebrew/opt/libomp/lib" PARENT_SCOPE)
	endif()
endfunction()

function(FIND_QRENCODE)
	if(UNIX)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -lqrencode" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} qrencode PARENT_SCOPE)
	endif()
endfunction()

function(FIND_RAPTOR)
	if(UNIX)
		#set(LINKER_FLAGS "${LINKER_FLAGS} -lraptor2" PARENT_SCOPE)
	endif()
endfunction()

function(FIND_ICU)
	if(LINUX)
		set(LINKER_FLAGS "${LINKER_FLAGS} -licui18n -licuuc -licudata" PARENT_SCOPE)
	endif()
	if(APPLE)
		set(INCLUDE_DIRS ${INCLUDE_DIRS} "/opt/homebrew/Cellar/icu4c/74.2/include" PARENT_SCOPE)
		set(LINKER_FLAGS "${LINKER_FLAGS} -licui18n -licuuc -licudata" PARENT_SCOPE)
		set(LIB_DIRS ${LIB_DIRS} "/opt/homebrew/Cellar/icu4c/74.2/lib" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} icudt icuin icuio icutu icuuc PARENT_SCOPE)
	endif()
endfunction()

function(FIND_JSON)
	if(UNIX)
		set(LINKER_FLAGS "${LINKER_FLAGS} -ljsoncpp" PARENT_SCOPE)
	endif()
	if(WIN32)
		set(LINKER_FLAGS ${LINKER_FLAGS} jsoncpp PARENT_SCOPE) # TODO
	endif()
endfunction()

set(WITHOUT_TCP OFF)
set(WITHOUT_BULLET OFF)
set(WITHOUT_HACD OFF)
set(WITHOUT_OPENVR OFF)
set(WITHOUT_IMGUI OFF)
set(WITHOUT_EXECINFO OFF)
set(WITHOUT_CRYPTOPP OFF)
set(WITHOUT_VRPN OFF)
set(WITHOUT_ART OFF)
set(WITHOUT_AV OFF)
set(WITHOUT_PRESENTER OFF)
set(WITHOUT_VTK OFF)
set(WITHOUT_CEF OFF)
set(WITHOUT_LAPACKE_BLAS OFF)
set(WITHOUT_EIGEN OFF)
set(WITHOUT_CGAL OFF)
set(WITHOUT_JSONCPP OFF)
set(WITHOUT_OPCUA OFF)
set(WITHOUT_CURL OFF)
set(WITHOUT_MTOUCH OFF)
set(WITHOUT_NUMPY OFF)
set(WITHOUT_SSH OFF)
set(WITHOUT_RAPTOR OFF)
set(WITHOUT_QRENCODE OFF)
set(WITHOUT_COLLADA OFF)
set(WITHOUT_DWG OFF)
set(WITHOUT_STEP OFF)
set(WITHOUT_STEPCODE OFF)
set(WITHOUT_IFC OFF)
set(WITHOUT_VIRTUOSE OFF)
set(WITHOUT_GDAL OFF)
set(WITHOUT_DEFERRED_RENDERING OFF)
set(WITHOUT_PANGO_CAIRO OFF)
set(WITHOUT_UNICODE OFF)
set(WITHOUT_IES OFF)
set(WITHOUT_GLU_TESS OFF)
set(WITHOUT_SHARED_MEMORY OFF)
set(WITHOUT_HDLC OFF)
set(WITHOUT_FFTW OFF)
set(WITHOUT_MDB OFF)
set(WITHOUT_COCOA OFF)
set(WITHOUT_SNAP7 OFF)
set(WITHOUT_E57 OFF)
set(WITHOUT_GLUT OFF)
set(WITHOUT_PDF OFF)

if(LINUX)
	#set( WITHOUT_TCP ON)
	#set( WITHOUT_BULLET ON)
	set( WITHOUT_OPENVR ON)
	set( WITHOUT_HACD ON)
	#set( WITHOUT_GTK ON)
	#set( WITHOUT_EXECINFO ON)
	set( WITHOUT_CRYPTOPP ON)
	set( WITHOUT_VRPN ON)
	#set( WITHOUT_ART ON)
	set( WITHOUT_AV ON)
	set( WITHOUT_VTK ON)
	#set( WITHOUT_CEF ON)
	#set( WITHOUT_LAPACKE_BLAS ON)
	set( WITHOUT_EIGEN ON)
	set( WITHOUT_CGAL ON)
	#set( WITHOUT_JSONCPP ON)
	set( WITHOUT_OPCUA ON)
	#set( WITHOUT_CURL ON)
	set( WITHOUT_MTOUCH ON)
	#set( WITHOUT_NUMPY ON)
	#set( WITHOUT_SSH ON)
	set( WITHOUT_RAPTOR ON)
	set( WITHOUT_QRENCODE ON)
	#set( WITHOUT_COLLADA ON)
	set( WITHOUT_DWG ON)
	set( WITHOUT_STEP ON)
	set( WITHOUT_STEPCODE ON)
	set( WITHOUT_IFC ON)
	set( WITHOUT_VIRTUOSE ON)
	set( WITHOUT_GDAL ON)
	#set( WITHOUT_DEFERRED_RENDERING ON)
	#set( WITHOUT_PANGO_CAIRO ON)
	#set( WITHOUT_UNICODE ON)
	set( WITHOUT_IES ON)
	#set( WITHOUT_GLU_TESS ON)
	#set( WITHOUT_SHARED_MEMORY ON)
	set( WITHOUT_HDLC ON)
	#set( WITHOUT_FFTW ON)
	set( WITHOUT_MDB ON)
endif()

if(APPLE)
	#set( WITHOUT_TCP ON)
	#set( WITHOUT_BULLET ON)
	set( WITHOUT_HACD ON)
	set( WITHOUT_OPENVR ON)
	set( WITHOUT_IMGUI ON)
	#set( WITHOUT_EXECINFO ON)
	set( WITHOUT_CRYPTOPP ON)
	set( WITHOUT_VRPN ON)
	set( WITHOUT_ART ON)
	#set( WITHOUT_AV ON)
	set( WITHOUT_PRESENTER ON)
	set( WITHOUT_VTK ON)
	#set( WITHOUT_CEF ON)
	#set( WITHOUT_LAPACKE_BLAS ON)
	#set( WITHOUT_EIGEN ON)
	set( WITHOUT_CGAL ON)
	#set( WITHOUT_JSONCPP ON)
	set( WITHOUT_OPCUA ON)
	#set( WITHOUT_CURL ON)
	set( WITHOUT_MTOUCH ON)
	set( WITHOUT_NUMPY ON)
	set( WITHOUT_SSH ON)
	set( WITHOUT_RAPTOR ON)
	set( WITHOUT_QRENCODE ON)
	#set( WITHOUT_COLLADA ON)
	set( WITHOUT_DWG ON)
	set( WITHOUT_STEP ON)
	set( WITHOUT_STEPCODE ON)
	set( WITHOUT_IFC ON)
	set( WITHOUT_VIRTUOSE ON)
	set( WITHOUT_GDAL ON)
	set( WITHOUT_DEFERRED_RENDERING ON)
	set( WITHOUT_PANGO_CAIRO ON)
	#set( WITHOUT_UNICODE ON)
	set( WITHOUT_IES ON)
	set( WITHOUT_GLU_TESS ON)
	#set( WITHOUT_SHARED_MEMORY ON)
	set( WITHOUT_HDLC ON)
	#set( WITHOUT_FFTW ON)
	set( WITHOUT_MDB ON)
	#set( WITHOUT_COCOA ON)
	set(WITHOUT_SNAP7 ON)
	set(WITHOUT_E57 ON)
	set(WITHOUT_GLUT ON)
	set(WITHOUT_PDF ON)
endif()

if(WASM)
	set( WITHOUT_TCP ON)
	set( WITHOUT_BULLET ON)
	set( WITHOUT_HACD ON)
	set( WITHOUT_OPENVR ON)
	set( WITHOUT_IMGUI ON)
	set( WITHOUT_EXECINFO ON)
	set( WITHOUT_CRYPTOPP ON)
	set( WITHOUT_VRPN ON)
	set( WITHOUT_ART ON)
	set( WITHOUT_AV ON)
	set( WITHOUT_PRESENTER ON)
	set( WITHOUT_VTK ON)
	set( WITHOUT_CEF ON)
	set( WITHOUT_LAPACKE_BLAS ON)
	set( WITHOUT_EIGEN ON)
	set( WITHOUT_CGAL ON)
	set( WITHOUT_JSONCPP ON)
	set( WITHOUT_OPCUA ON)
	set( WITHOUT_CURL ON)
	set( WITHOUT_MTOUCH ON)
	set( WITHOUT_NUMPY ON)
	set( WITHOUT_SSH ON)
	set( WITHOUT_RAPTOR ON)
	set( WITHOUT_QRENCODE ON)
	set( WITHOUT_COLLADA ON)
	set( WITHOUT_DWG ON)
	set( WITHOUT_STEP ON)
	set( WITHOUT_STEPCODE ON)
	set( WITHOUT_IFC ON)
	set( WITHOUT_VIRTUOSE ON)
	#set( WITHOUT_GDAL ON)
	set( WITHOUT_DEFERRED_RENDERING ON)
	set( WITHOUT_PANGO_CAIRO ON)
	set( WITHOUT_UNICODE ON)
	set( WITHOUT_IES ON)
	set( WITHOUT_GLU_TESS ON)
	set( WITHOUT_SHARED_MEMORY ON)
	set( WITHOUT_HDLC ON)
	set( WITHOUT_FFTW ON)
	set( WITHOUT_MDB ON)
	set( WITHOUT_COCOA ON)

	add_definitions( -DOSG_OGL_ES2 )
endif()

if(WIN32)
	set( WITHOUT_HACD ON)
	set( WITHOUT_DWG ON)
	set( WITHOUT_RAPTOR ON)
	set( WITHOUT_OPCUA ON)
	set( WITHOUT_IES ON)
	set( WITHOUT_VTK ON)
	set( WITHOUT_VRPN ON)
	set( WITHOUT_MTOUCH ON)
	set( WITHOUT_STEPCODE ON)
	set( WITHOUT_VIRTUOSE ON)
	set( WITHOUT_NUMPY ON)
	set( WITHOUT_EXECINFO ON)
	set( WITHOUT_HDLC ON)
	set( WITHOUT_PRESENTER ON)
	set( WITHOUT_MDB ON)
	set( WITHOUT_COCOA ON)

	add_definitions( -DHAVE_SNPRINTF )
endif()

function(SETUP_VARS)
	addDefinition(WITHOUT_TCP -DWITHOUT_TCP )
	addDefinition(WITHOUT_BULLET -DWITHOUT_BULLET )
	addDefinition(WITHOUT_HACD -DWITHOUT_HACD )
	addDefinition(WITHOUT_OPENVR -DWITHOUT_OPENVR )
	addDefinition(WITHOUT_IMGUI -DWITHOUT_IMGUI )
	addDefinition(WITHOUT_EXECINFO -DWITHOUT_EXECINFO )
	addDefinition(WITHOUT_CRYPTOPP -DWITHOUT_CRYPTOPP )
	addDefinition(WITHOUT_VRPN -DWITHOUT_VRPN )
	addDefinition(WITHOUT_ART -DWITHOUT_ART )
	addDefinition(WITHOUT_AV -DWITHOUT_AV )
	addDefinition(WITHOUT_PRESENTER -DWITHOUT_PRESENTER )
	addDefinition(WITHOUT_VTK -DWITHOUT_VTK )
	addDefinition(WITHOUT_CEF -DWITHOUT_CEF )
	addDefinition(WITHOUT_LAPACKE_BLAS -DWITHOUT_LAPACKE_BLAS )
	addDefinition(WITHOUT_EIGEN -DWITHOUT_EIGEN )
	addDefinition(WITHOUT_CGAL -DWITHOUT_CGAL )
	addDefinition(WITHOUT_JSONCPP -DWITHOUT_JSONCPP )
	addDefinition(WITHOUT_OPCUA -DWITHOUT_OPCUA )
	addDefinition(WITHOUT_CURL -DWITHOUT_CURL )
	addDefinition(WITHOUT_MTOUCH -DWITHOUT_MTOUCH )
	addDefinition(WITHOUT_NUMPY -DWITHOUT_NUMPY )
	addDefinition(WITHOUT_SSH -DWITHOUT_SSH )
	addDefinition(WITHOUT_RAPTOR -DWITHOUT_RAPTOR )
	addDefinition(WITHOUT_QRENCODE -DWITHOUT_QRENCODE )
	addDefinition(WITHOUT_COLLADA -DWITHOUT_COLLADA )
	addDefinition(WITHOUT_DWG -DWITHOUT_DWG )
	addDefinition(WITHOUT_STEP -DWITHOUT_STEP )
	addDefinition(WITHOUT_STEPCODE -DWITHOUT_STEPCODE )
	addDefinition(WITHOUT_IFC -DWITHOUT_IFC )
	addDefinition(WITHOUT_VIRTUOSE -DWITHOUT_VIRTUOSE )
	addDefinition(WITHOUT_GDAL -DWITHOUT_GDAL )
	addDefinition(WITHOUT_DEFERRED_RENDERING -DWITHOUT_DEFERRED_RENDERING )
	addDefinition(WITHOUT_PANGO_CAIRO -DWITHOUT_PANGO_CAIRO )
	addDefinition(WITHOUT_UNICODE -DWITHOUT_UNICODE )
	addDefinition(WITHOUT_IES -DWITHOUT_IES )
	addDefinition(WITHOUT_GLU_TESS -DWITHOUT_GLU_TESS )
	addDefinition(WITHOUT_SHARED_MEMORY -DWITHOUT_SHARED_MEMORY )
	addDefinition(WITHOUT_HDLC -DWITHOUT_HDLC )
	addDefinition(WITHOUT_FFTW -DWITHOUT_FFTW )
	addDefinition(WITHOUT_MDB -DWITHOUT_MDB )
	addDefinition(WITHOUT_COCOA -DWITHOUT_COCOA )
	addDefinition(WITHOUT_SNAP7 -DWITHOUT_SNAP7 )
	addDefinition(WITHOUT_E57 -DWITHOUT_E57 )
	addDefinition(WITHOUT_GLUT -DWITHOUT_GLUT )
	addDefinition(WITHOUT_PDF -DWITHOUT_PDF )
endfunction()

FIND_ZLIB()
FIND_LIBXML()
FIND_FREETYPE()
FIND_BOOST()
FIND_PYTHON()
#FIND_GLUT()
FIND_OPENSG()
FIND_BULLET()
FIND_COLLADA()
FIND_ICU()
FIND_CURL()
FIND_CRYPTOPP()
FIND_QRENCODE()
FIND_RAPTOR()
FIND_AV()
FIND_LAPACKE()
FIND_EIGEN()
FIND_FFTW()
FIND_OMP()
FIND_JSON()
FIND_SSH()
FIND_PNG()
FIND_JPG()
FIND_GDAL()
FIND_CGAL()
FIND_IMGUI()
FIND_CEF()
FIND_OPENVR()
FIND_OCE()
FIND_IFC()

if (APPLE)
set(CMAKE_CXX_STANDARD 11)
else()
set(CMAKE_CXX_STANDARD 11)
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)

SETUP_VARS()
if(WASM OR UNIX)
	string(STRIP ${LINKER_FLAGS} LINKER_FLAGS)
endif()

set(INCLUDE_DIRS ${INCLUDE_DIRS} "src")
set(INCLUDE_DIRS ${INCLUDE_DIRS} "src/core/networking/snap7/sys")
set(INCLUDE_DIRS ${INCLUDE_DIRS} "src/core/networking/snap7/core")
set(INCLUDE_DIRS ${INCLUDE_DIRS} "src/core/networking/snap7/lib")
set(INCLUDE_DIRS ${INCLUDE_DIRS} "src/core/setup/windows/glut/freeglut/src")
set(INCLUDE_DIRS ${INCLUDE_DIRS} "src/core/setup/windows/glut/freeglut/include")
include_directories(${INCLUDE_DIRS})
link_directories(${LIB_DIRS})

add_executable(polyvr src/main.cpp)
target_sources(polyvr PRIVATE src/PolyVR.cpp)


if(APPLE)
	macro(compileHelper name suffix)
		set(_helper_target "cefHelper${suffix}")
		set(_helper_output_name "CefSubProcessMac${name}")
		add_executable(${_helper_target} ressources/cefMac/WKSubProcess.cpp)
		target_compile_options(${_helper_target} PRIVATE -std=c++17)
		target_link_libraries(${_helper_target} cef_dll_wrapper ${CEF_STANDARD_LIBS})
		set_target_properties(${_helper_target} PROPERTIES OUTPUT_NAME ${_helper_output_name})
		set_target_properties(${_helper_target} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/ressources/cefMac/helper")
		add_dependencies(polyvr "${_helper_target}")
	endmacro()

	compileHelper("" "")
	compileHelper(" (Alerts)" "_alerts")
	compileHelper(" (GPU)" "_gpu")
	compileHelper(" (Plugin)" "_plugin")
	compileHelper(" (Renderer)" "_renderer")

	file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build/Contents)
endif()

# command to run polyvr after building within visual studio
if(WIN32)
#add_custom_command(TARGET polyvr POST_BUILD
#    COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/start-win2.bat
#    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
#)
endif()

# start with optional stuff

if(APPLE)
target_sources(polyvr PRIVATE src/core/setup/windows/VRCocoaWindow.mm)
endif()

if(NOT WASM)
target_sources(polyvr PRIVATE src/core/math/triangulator.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRSharedMemory.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRDefShading.cpp) # needs compiling def shading in OSG
target_sources(polyvr PRIVATE src/core/scripting/VRPyTriangulator.cpp)
if(NOT WITHOUT_PDF)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPDF.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRPDF.cpp)
endif()
endif()

if(WIN32)
target_sources(polyvr PRIVATE src/core/setup/windows/VRHeadMountedDisplay.cpp)
endif()

if(NOT WITHOUT_MTOUCH)
target_sources(polyvr PRIVATE src/core/setup/devices/VRMultiTouch.cpp)
endif()
if(NOT WITHOUT_PRESENTER)
target_sources(polyvr PRIVATE src/core/setup/devices/VRPresenter.cpp)
endif()

if(NOT WITHOUT_AV)
target_sources(polyvr PRIVATE src/core/objects/material/VRVideo.cpp) # needs libav
target_sources(polyvr PRIVATE src/core/scene/sound/VRSound.cpp) # needs libav
target_sources(polyvr PRIVATE src/core/scene/sound/VRSoundUtils.cpp) # needs libav
target_sources(polyvr PRIVATE src/core/scene/sound/VRSoundManager.cpp) # needs libav
target_sources(polyvr PRIVATE src/core/scene/sound/VRMicrophone.cpp) # needs libav
target_sources(polyvr PRIVATE src/core/scripting/VRPyRecorder.cpp) # needs AV
target_sources(polyvr PRIVATE src/core/scripting/VRPySound.cpp) # needs libav
target_sources(polyvr PRIVATE src/core/tools/VRRecorder.cpp) # needs av
if(NOT WITHOUT_CEF)
target_sources(polyvr PRIVATE src/addons/CEF/VRPyWebCam.cpp)
target_sources(polyvr PRIVATE src/addons/CEF/VRWebCam.cpp)
endif()
endif()

if(NOT WITHOUT_QRENCODE)
target_sources(polyvr PRIVATE src/core/tools/VRQRCode.cpp) # needs qrencode
endif()

if(NOT WITHOUT_EIGEN)
target_sources(polyvr PRIVATE src/addons/Engineering/Mechanics/VRPolarVertex.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Mechanics/VRGearSegmentation.cpp) # needs eigen
target_sources(polyvr PRIVATE src/addons/Engineering/Mechanics/VRAxleSegmentation.cpp) # needs eigen
target_sources(polyvr PRIVATE src/addons/Engineering/Mechanics/VRThreadSegmentation.cpp) # needs eigen
endif()

if(NOT WITHOUT_LAPACKE_BLAS)
target_sources(polyvr PRIVATE src/core/math/PCA.cpp) # needs lapacke/blas
target_sources(polyvr PRIVATE src/core/math/Eigendecomposition.cpp) # needs lapacke/blas
target_sources(polyvr PRIVATE src/core/math/SingularValueDecomposition.cpp) # needs lapacke/blas
endif()

if(NOT WITHOUT_FFTW)
target_sources(polyvr PRIVATE src/core/math/fft.cpp)
endif()

if(NOT WITHOUT_BULLET)
target_sources(polyvr PRIVATE src/core/math/kinematics/VRKinematics.cpp) # needs bullet
target_sources(polyvr PRIVATE src/core/scene/VRPhysicsManager.cpp) # needs bullet
target_sources(polyvr PRIVATE src/core/scripting/VRPySpatialCollisionManager.cpp) # needs bullet
target_sources(polyvr PRIVATE src/addons/WorldGenerator/terrain/VRTerrainPhysicsShape.cpp) # needs bullet
target_sources(polyvr PRIVATE src/core/objects/geometry/VRPhysics.cpp) # needs bullet
target_sources(polyvr PRIVATE src/core/objects/geometry/VRSpatialCollisionManager.cpp) # needs bullet
target_sources(polyvr PRIVATE src/addons/Bullet/Particles/VRPyParticles.cpp)
target_sources(polyvr PRIVATE src/addons/Bullet/Particles/VREmitter.cpp)
target_sources(polyvr PRIVATE src/addons/Bullet/Particles/VRParticles.cpp)
target_sources(polyvr PRIVATE src/addons/Bullet/CarDynamics/VRPyCarDynamics.cpp)
target_sources(polyvr PRIVATE src/addons/Bullet/CarDynamics/CarDynamics.cpp)
target_sources(polyvr PRIVATE src/addons/Bullet/CarDynamics/VRDriver.cpp)
target_sources(polyvr PRIVATE src/addons/Bullet/Fluids/VRMetaBalls.cpp)
target_sources(polyvr PRIVATE src/addons/Bullet/Fluids/VRPyFluids.cpp)
target_sources(polyvr PRIVATE src/addons/Bullet/Fluids/VRFluids.cpp)
target_sources(polyvr PRIVATE src/addons/Bullet/SoftBody/SoftBody.cpp)
endif()

if(NOT WITHOUT_BULLET AND NOT WITHOUT_AV)
target_sources(polyvr PRIVATE src/addons/Bullet/CarDynamics/CarSound/CarSound.cpp)
endif()

if(NOT WITHOUT_CGAL)
target_sources(polyvr PRIVATE src/core/math/VRConvexHull.cpp) # needs cgal
target_sources(polyvr PRIVATE src/addons/Engineering/CSG/CSGGeometryAlgorithms.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/CSG/CSGGeometry.cpp)
#target_sources(polyvr PRIVATE src/addons/Engineering/CSG/csgjs.cpp) # deprecated
target_sources(polyvr PRIVATE src/addons/Engineering/CSG/VRPyCSG.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/CSG/CSGGeometryBis.cpp)
endif()

if(NOT WITHOUT_SSH)
target_sources(polyvr PRIVATE src/core/networking/VRSSH.cpp) # needs libssh2
endif()

if(NOT WITHOUT_TCP)
target_sources(polyvr PRIVATE src/core/networking/VRPing.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRNetworkClient.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRCollaboration.cpp)
target_sources(polyvr PRIVATE src/core/networking/udp/VRUDPClient.cpp)
target_sources(polyvr PRIVATE src/core/networking/udp/VRUDPServer.cpp)
target_sources(polyvr PRIVATE src/core/networking/tcp/VRTCPUtils.cpp)
target_sources(polyvr PRIVATE src/core/networking/tcp/VRTCPClient.cpp)
target_sources(polyvr PRIVATE src/core/networking/tcp/VRTCPServer.cpp)
target_sources(polyvr PRIVATE src/core/networking/tcp/VRICEclient.cpp)
endif()

if(NOT WITHOUT_COLLADA)
target_sources(polyvr PRIVATE src/core/scene/import/COLLADA/VRCOLLADA.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/COLLADA/VRCOLLADA_Material.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/COLLADA/VRCOLLADA_Geometry.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/COLLADA/VRCOLLADA_Kinematics.cpp)
endif()

if(NOT WITHOUT_IFC)
target_sources(polyvr PRIVATE src/core/scene/import/VRIFC.cpp)
endif()

if(NOT WITHOUT_STEP)
target_sources(polyvr PRIVATE src/core/scene/import/VRSTEPCascade.cpp) # needs OpenCascade
endif()

if(NOT WITHOUT_GDAL)
target_sources(polyvr PRIVATE src/core/scene/import/GIS/VRGDAL.cpp) # needs gdal
endif()

if(NOT WITHOUT_ART)
target_sources(polyvr PRIVATE src/core/setup/tracking/DTrack.cpp)
target_sources(polyvr PRIVATE src/core/setup/tracking/ART.cpp)
endif()

if(NOT WITHOUT_CRYPTOPP)
target_sources(polyvr PRIVATE src/core/utils/VREncryption.cpp) # needs cryptopp
target_sources(polyvr PRIVATE src/core/scripting/VRPyEncryption.cpp) # needs cryptopp
endif()

if(NOT WITHOUT_RAPTOR)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROWLImport.cpp) # needs raptor
endif()

if(NOT WITHOUT_CEF)
target_sources(polyvr PRIVATE src/addons/CEF/CEF.cpp)
target_sources(polyvr PRIVATE src/addons/CEF/VRPyCEF.cpp)
endif()

if(NOT WITHOUT_STEPCODE)
target_sources(polyvr PRIVATE src/core/scene/import/STEP/VRSTEP.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/STEP/VRSTEPExplorer.cpp)
endif()
target_sources(polyvr PRIVATE src/core/objects/geometry/brep/VRBRepBound.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/brep/VRBRepEdge.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/brep/VRBRepSurface.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/brep/VRBRepUtils.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/brep/VRPyBRep.cpp)

target_sources(polyvr PRIVATE src/core/setup/windows/VRMultiWindow.cpp)

target_sources(polyvr PRIVATE src/core/gui/VRAppManager.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiSetup.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiScene.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiEditor.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiVectorEntry.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiNav.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiNetwork.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiSemantics.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiGeneral.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiMonitor.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiNetwork.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiScripts.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiRecWidget.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiConsole.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiBits.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiSignals.cpp)
target_sources(polyvr PRIVATE src/core/gui/VRGuiManager.cpp)

target_sources(polyvr PRIVATE src/core/gui/widgets/VRConceptWidget.cpp)
target_sources(polyvr PRIVATE src/core/gui/widgets/VREntityWidget.cpp)
target_sources(polyvr PRIVATE src/core/gui/widgets/VRRuleWidget.cpp)
target_sources(polyvr PRIVATE src/core/gui/widgets/VRAppLauncher.cpp)
target_sources(polyvr PRIVATE src/core/gui/widgets/VRAppPanel.cpp)
target_sources(polyvr PRIVATE src/core/gui/widgets/VRCanvasWidget.cpp)
target_sources(polyvr PRIVATE src/core/gui/widgets/VRConnectorWidget.cpp)
target_sources(polyvr PRIVATE src/core/gui/widgets/VRSemanticWidget.cpp)
target_sources(polyvr PRIVATE src/core/gui/widgets/VRWidgetsCanvas.cpp)

if(NOT WITHOUT_IMGUI)
target_sources(polyvr PRIVATE src/addons/Gui/VRGui.cpp)
target_sources(polyvr PRIVATE src/core/gui/clipboard/clip.cpp)
if(WIN32)
target_sources(polyvr PRIVATE src/core/gui/clipboard/clip_win.cpp)
else()
target_sources(polyvr PRIVATE src/core/gui/clipboard/clip_x11.cpp)
endif()
target_sources(polyvr PRIVATE src/core/gui/clipboard/image.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiApps.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiConsoles.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiEditor.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiManager.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiScene.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiSceneNavigation.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiSceneNetwork.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiSceneRendering.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiSceneScenegraph.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiSceneScripting.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiSceneSemantics.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiSetup.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiUtils.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/VRImguiProfiler.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/imEditor/TextEditor.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/imFileDialog/ImGuiFileDialog.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/imWidgets/VRImguiCombo.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/imWidgets/VRImguiInput.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/imWidgets/VRImguiTreeview.cpp)
target_sources(polyvr PRIVATE src/core/gui/imgui/imWidgets/VRImguiVector.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/version/version.cpp)
target_sources(polyvr PRIVATE src/core/math/Layer2D.cpp)
target_sources(polyvr PRIVATE src/core/math/VRStateMachine.cpp)
target_sources(polyvr PRIVATE src/core/math/VRSineFit.cpp)
target_sources(polyvr PRIVATE src/core/math/coordinates.cpp)
target_sources(polyvr PRIVATE src/core/math/partitioning/Partitiontree.cpp)
target_sources(polyvr PRIVATE src/core/math/partitioning/Octree.cpp)
target_sources(polyvr PRIVATE src/core/math/partitioning/Quadtree.cpp)
target_sources(polyvr PRIVATE src/core/math/OSGMathFwd.cpp)
target_sources(polyvr PRIVATE src/core/math/interpolator.cpp)
target_sources(polyvr PRIVATE src/core/math/partitioning/Tsdf.cpp)
target_sources(polyvr PRIVATE src/core/math/equation.cpp)
target_sources(polyvr PRIVATE src/core/math/partitioning/boundingbox.cpp)
target_sources(polyvr PRIVATE src/core/math/kinematics/VRFABRIK.cpp)
target_sources(polyvr PRIVATE src/core/math/kinematics/VRConstraint.cpp)
target_sources(polyvr PRIVATE src/core/math/VRKabschAlgorithm.cpp)
target_sources(polyvr PRIVATE src/core/math/polygon.cpp)
target_sources(polyvr PRIVATE src/core/math/pose.cpp)
target_sources(polyvr PRIVATE src/core/math/partitioning/frustum.cpp)
target_sources(polyvr PRIVATE src/core/math/Expression.cpp)
target_sources(polyvr PRIVATE src/core/math/patch.cpp)
target_sources(polyvr PRIVATE src/core/math/path.cpp)
target_sources(polyvr PRIVATE src/core/math/partitioning/graph.cpp)
target_sources(polyvr PRIVATE src/core/math/datarow.cpp)
target_sources(polyvr PRIVATE src/core/math/PID.cpp)
target_sources(polyvr PRIVATE src/core/navigation/VRNavigator.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/networking/mongoose/mongoose.c)
target_sources(polyvr PRIVATE src/core/networking/VRWebSocket.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRMainInterface.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRNetworkManager.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRNetworkServer.cpp)
#target_sources(polyvr PRIVATE src/core/networking/VROPCUA.cpp) # needs OPCUA
#target_sources(polyvr PRIVATE src/core/networking/VROPCUAclient.cpp) # needs OPCUA
#target_sources(polyvr PRIVATE src/core/networking/VROPCUAvariant.cpp) # needs OPCUA
target_sources(polyvr PRIVATE src/core/networking/VRSocket.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRProtocol.cpp)
target_sources(polyvr PRIVATE src/core/networking/VRSceneSync.cpp)
#target_sources(polyvr PRIVATE src/core/networking/VRHDLC.cpp) # needs ioctl
target_sources(polyvr PRIVATE src/core/networking/rest/VRRestResponse.cpp)
target_sources(polyvr PRIVATE src/core/networking/rest/VRRestClient.cpp)
target_sources(polyvr PRIVATE src/core/networking/rest/VRRestServer.cpp)
target_sources(polyvr PRIVATE src/core/networking/mqtt/VRMQTTClient.cpp)
target_sources(polyvr PRIVATE src/core/networking/mqtt/VRMQTTServer.cpp)
if(NOT WITHOUT_SNAP7)
target_sources(polyvr PRIVATE src/core/networking/snap7/VRProfibusClient.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/core/s7_client.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/core/s7_isotcp.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/core/s7_micro_client.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/core/s7_partner.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/core/s7_peer.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/core/s7_server.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/core/s7_text.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/lib/snap7_libmain.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/snap7.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/sys/snap_msgsock.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/sys/snap_sysutils.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/sys/snap_tcpsrvr.cpp)
target_sources(polyvr PRIVATE src/core/networking/snap7/sys/snap_threads.cpp)
endif()
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/scene/VRObjectGroupManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRThreadManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRScene.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/VRImport.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/VRExport.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/VRDWG.cpp) # TODO: needs libdwg
target_sources(polyvr PRIVATE src/core/scene/import/VRDXF.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/VRVTK.cpp)
#target_sources(polyvr PRIVATE src/core/scene/import/VRIES.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/VRML.cpp)
if(NOT WITHOUT_E57)
target_sources(polyvr PRIVATE src/core/scene/import/E57/E57.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/E57Foundation.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/E57FoundationImpl.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/E57Simple.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/E57SimpleImpl.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/LASReader.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/E57/time_conversion.c)
endif()
target_sources(polyvr PRIVATE src/core/scene/import/VRPLY.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/VRTS.cpp)
target_sources(polyvr PRIVATE src/core/scene/import/GLTF/GLTF.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRBackground.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRCameraManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRProjectsList.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRSemanticManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRRenderStudio.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRFog.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRDeferredRenderStage.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRSSAO.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRFXAA.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRRenderManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/rendering/VRHMDDistortion.cpp)
target_sources(polyvr PRIVATE src/core/scene/interfaces/VRScenegraphInterface.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRMaterialManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRSpaceWarper.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRObjectManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRAnimationManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRSceneLoader.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRCallbackManager.cpp)
target_sources(polyvr PRIVATE src/core/scene/VRSceneManager.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/scripting/VRPySelection.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyConstructionKit.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyGraph.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRSceneModules.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyBoundingbox.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySelector.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMeasure.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyObject.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyClipPlane.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRSceneGlobals.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyLod.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPointCloud.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPyMultiTouch.cpp) # needs mtouch
target_sources(polyvr PRIVATE src/core/scripting/VRPyNamed.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPatchSelection.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySocket.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyWaypoint.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPolygon.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyConstraint.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyCamera.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyTextureMosaic.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyJointTool.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyObjectManager.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyColorChooser.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPath.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyNetworking.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySprite.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMultiGrid.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySky.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPolygonSelection.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyListMath.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMobile.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMenu.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyGeoPrimitive.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMaterial.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyNavPreset.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyGeometry.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyTextureRenderer.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyLight.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyAnnotationEngine.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyStateMachine.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyLightBeacon.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMath.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPyOPCUA.cpp) # needs OPCUA
target_sources(polyvr PRIVATE src/core/scripting/VRPyPose.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyScenegraphInterface.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySnappingEngine.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyProjectManager.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMouse.cpp)
#target_sources(polyvr PRIVATE src/core/scripting/VRPyHaptic.cpp) # needs bullet
target_sources(polyvr PRIVATE src/core/scripting/VRPyCodeCompletion.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyBase.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRScriptManager.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyAnalyticGeometry.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyStroke.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySyncNode.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRScript.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyUndoManager.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyNavigator.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyAnimation.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyPathtool.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyRendering.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyImage.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyBaseFactory.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyProgress.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPySetup.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyTransform.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyTypeCaster.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyDevice.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyTextureGenerator.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyKinematics.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyIntersection.cpp)
target_sources(polyvr PRIVATE src/core/scripting/VRPyMultiGrid.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/setup/windows/VRWindow.cpp)
target_sources(polyvr PRIVATE src/core/setup/windows/VRView.cpp)
target_sources(polyvr PRIVATE src/core/setup/windows/VRWindowManager.cpp)
if(NOT WITHOUT_IMGUI)
target_sources(polyvr PRIVATE src/core/setup/windows/VRGlutEditor.cpp)
endif()

if(NOT WITHOUT_GLUT)
if(WIN32)
target_sources(polyvr PRIVATE src/core/setup/windows/glut/VRGlutWinExtensions.cpp)
else()
target_sources(polyvr PRIVATE src/core/setup/windows/glut/VRGlutExtensions.cpp)
endif()
target_sources(polyvr PRIVATE src/core/setup/windows/VRGlutWindow.cpp)
endif()
target_sources(polyvr PRIVATE src/core/setup/windows/VRViewManager.cpp)
target_sources(polyvr PRIVATE src/core/setup/VRSetupManager.cpp)
#target_sources(polyvr PRIVATE src/core/setup/tracking/VRPN.cpp) # needs VRPN
#target_sources(polyvr PRIVATE src/core/setup/tracking/Vive.cpp) # needs VIVE
#target_sources(polyvr PRIVATE src/core/setup/tracking/OptiTrack.cpp)
target_sources(polyvr PRIVATE src/core/setup/VRSetup.cpp)
target_sources(polyvr PRIVATE src/core/setup/VRWebXR.cpp)
target_sources(polyvr PRIVATE src/core/setup/VRNetwork.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRIntersect.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRAvatar.cpp)
#target_sources(polyvr PRIVATE src/core/setup/devices/virtuose.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRKeyboard.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRMouse.cpp)
#target_sources(polyvr PRIVATE src/core/setup/devices/VRHaptic.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRSignal.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRFlystick.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRServer.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRDevice.cpp)
target_sources(polyvr PRIVATE src/core/setup/devices/VRDeviceManager.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/tools/VRProjectManager.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRWaypoint.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRMesure.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRSnappingEngine.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRClipPlane.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRAnnotationEngine.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRText.cpp) # needs pango cairo
target_sources(polyvr PRIVATE src/core/tools/VRMenu.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRKinematictool.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRPathtool.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRColorChooser.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRConstructionKit.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRGeoPrimitive.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRTextureRenderer.cpp)
target_sources(polyvr PRIVATE src/core/tools/selection/VRPolygonSelection.cpp)
target_sources(polyvr PRIVATE src/core/tools/selection/VRSelection.cpp)
target_sources(polyvr PRIVATE src/core/tools/selection/VRPatchSelection.cpp)
target_sources(polyvr PRIVATE src/core/tools/selection/VRSelector.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRUndoManager.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRAnalyticGeometry.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRGizmo.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRPlayer.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRPyTools.cpp)
target_sources(polyvr PRIVATE src/core/tools/VRTimeline.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/objects/geometry/sprite/VRSprite.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/sprite/VRSpriteResizeTool.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRMultiGrid.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/OSGGeometry.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRGeoData.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRGeometry.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRHandle.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRPrimitive.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRSky.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRStroke.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/VRMultiGrid.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/drawing/VRPyDrawing.cpp)
target_sources(polyvr PRIVATE src/core/objects/geometry/drawing/VRTechnicalDrawing.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/objects/material/OSGMaterial.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRBricks.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRMaterial.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRNormalmap.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRPerlin.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRShader.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRShaderFactory.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRTexture.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRTextureGenerator.cpp)
target_sources(polyvr PRIVATE src/core/objects/material/VRTextureMosaic.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/objects/object/OSGCore.cpp)
target_sources(polyvr PRIVATE src/core/objects/object/VRAttachment.cpp)
target_sources(polyvr PRIVATE src/core/objects/object/VRObject.cpp)
target_sources(polyvr PRIVATE src/core/objects/OSGCamera.cpp)
target_sources(polyvr PRIVATE src/core/objects/OSGObject.cpp)
target_sources(polyvr PRIVATE src/core/objects/OSGTransform.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRAnimation.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRKeyFrameAnimation.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRCamera.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRGroup.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRLight.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRLightBeacon.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRLod.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRLodTree.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRPointCloud.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRStage.cpp)
target_sources(polyvr PRIVATE src/core/objects/VRTransform.cpp)
endif()

if(TRUE) # ?
target_sources(polyvr PRIVATE src/core/objects/sync/VRSyncChangelist.cpp)
target_sources(polyvr PRIVATE src/core/objects/sync/VRSyncConnection.cpp)
target_sources(polyvr PRIVATE src/core/objects/sync/VRSyncNode.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/core/utils/system/VRSystem.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/ioapi.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/ioapi_buf.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/ioapi_mem.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/unzip.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/minizip/zip.c)
target_sources(polyvr PRIVATE src/core/utils/zipper/filesystem.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/tools.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/unzipper.cpp)
target_sources(polyvr PRIVATE src/core/utils/zipper/zipper.cpp)
target_sources(polyvr PRIVATE src/core/utils/coreDumpHandler.cpp)
target_sources(polyvr PRIVATE src/core/utils/isNan.cpp)
target_sources(polyvr PRIVATE src/core/utils/toString.cpp)
target_sources(polyvr PRIVATE src/core/utils/Thread.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRCallbackWrapper.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRChangeList.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRDoublebuffer.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRSpreadsheet.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRFlags.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRFunction.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRGlobals.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRInternalMonitor.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRLogger.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRManager.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRName.cpp)
target_sources(polyvr PRIVATE src/core/utils/VROptions.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRProfiler.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRProgress.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRRate.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRStorage.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRTests.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRTimer.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRUndoInterface.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRVisualLayer.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRMutex.cpp)
target_sources(polyvr PRIVATE src/core/utils/VRScheduler.cpp)
target_sources(polyvr PRIVATE src/core/utils/xml.cpp)
endif()

if(TRUE) # ok
target_sources(polyvr PRIVATE src/addons/Character/VRBehavior.cpp)
target_sources(polyvr PRIVATE src/addons/Character/VRCharacter.cpp)
target_sources(polyvr PRIVATE src/addons/Character/VRPyCharacter.cpp)
target_sources(polyvr PRIVATE src/addons/Character/VRSkeleton.cpp)
target_sources(polyvr PRIVATE src/addons/Character/VRSkin.cpp)
target_sources(polyvr PRIVATE src/addons/Character/VRHumanoid.cpp)
target_sources(polyvr PRIVATE src/addons/CaveKeeper/CaveKeeper.cpp)
target_sources(polyvr PRIVATE src/addons/CaveKeeper/CKOctree.cpp)
target_sources(polyvr PRIVATE src/addons/CaveKeeper/VRPyCaveKeeper.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/VRNumberingEngine.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/VRProfile.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/network.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRLogistics.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRPyAMLLoader.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRPyFactory.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRAMLLoader.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRPyProduction.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRProduction.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRPyLogistics.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Factory/VRFactory.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/VRPyEngineering.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Machining/VRMachiningSimulation.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Machining/VRMachiningCode.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Machining/VRMachiningKinematics.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Machining/VRCartesianKinematics.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Machining/VRPyMachining.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRMillingCuttingToolProfile.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRMillingMachine.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRMillingWorkPiece.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRPyMillingCuttingToolProfile.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRPyMillingMachine.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Milling/VRPyMillingWorkPiece.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Mechanics/VRPyMechanism.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Mechanics/VRMechanism.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/VRRobotArm.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/VRPipeSystem.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Chemistry/VRPyMolecule.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Chemistry/VRMolecule.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Chemistry/VRMoleculeMat.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Chemistry/VRCrystal.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Chemistry/VRAtom.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Programming/VRLADEngine.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Programming/VRLADVariable.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Wiring/VRWire.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Wiring/VRWiringSimulation.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Wiring/VRElectricSystem.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Wiring/VRElectricComponent.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Wiring/VRElectricVisualization.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Programming/VRSCLEngine.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Space/VRRocketExhaust.cpp)
target_sources(polyvr PRIVATE src/addons/Engineering/Space/VRSpaceMission.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROntologyRule.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRReasoner.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROWLExport.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROntologyLibrary.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRStatement.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROntologyUtils.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRSemanticUtils.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRPyOntology.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VROntology.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRConcept.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VREntity.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Reasoning/VRProperty.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Processes/VRPyProcess.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Processes/VRProcessEngine.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Processes/VRProcessLayout.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Processes/VRProcess.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Segmentation/VRPyAdjacencyGraph.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Segmentation/VRPySegmentation.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Segmentation/VRSegmentation.cpp)
target_sources(polyvr PRIVATE src/addons/Semantics/Segmentation/VRAdjacencyGraph.cpp)
target_sources(polyvr PRIVATE src/addons/SimViDekont/VRPySimViDekont.cpp)
target_sources(polyvr PRIVATE src/addons/SimViDekont/SimViDekont.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/GIS/GISWorld.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/GIS/OSMMap.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/GIS/VRAtlas.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/GIS/VRMapManager.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/weather/VRRain.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/weather/VRRainCarWindshield.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/weather/VRPyWeather.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/nature/VRGrassPatch.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/nature/VRTree.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/nature/VRPyNature.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/nature/VRNature.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/nature/VRPlantMaterial.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/VRWorldGenerator.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/terrain/VRPlanet.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/terrain/VROrbit.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/terrain/VRPyTerrain.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/terrain/VRTerrain.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/VRPyWorldGenerator.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/assets/Asset.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/assets/StreetLamp.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/buildings/VRDistrict.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/buildings/VRBuilding.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/traffic/VRTrafficLights.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/traffic/VRPyTrafficSimulation.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/traffic/VRTrafficSimulation.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRTunnel.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRRoad.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRRoadBase.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRTrafficSigns.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRBridge.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRRoadNetwork.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRRoadIntersection.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/roads/VRAsphalt.cpp)
target_sources(polyvr PRIVATE src/addons/WorldGenerator/VRWorldModule.cpp)
target_sources(polyvr PRIVATE src/addons/LeapMotion/VRLeap.cpp)
target_sources(polyvr PRIVATE src/addons/LeapMotion/VRHandGeo.cpp)
target_sources(polyvr PRIVATE src/addons/LeapMotion/VRPyLeap.cpp)
target_sources(polyvr PRIVATE src/addons/LeapMotion/VRPyHandGeo.cpp)
target_sources(polyvr PRIVATE src/addons/LeapMotion/VRLeapFrame.cpp)
target_sources(polyvr PRIVATE src/addons/Algorithms/VRPyPathFinding.cpp)
target_sources(polyvr PRIVATE src/addons/Algorithms/VRPyGraphLayout.cpp)
target_sources(polyvr PRIVATE src/addons/Algorithms/VRPathFinding.cpp)
target_sources(polyvr PRIVATE src/addons/Algorithms/VRGraphLayout.cpp)
target_sources(polyvr PRIVATE src/addons/Algorithms/VRMeshSubdivision.cpp)
endif()

if(LINUX)
add_dependencies(polyvr cefResourceCopy)
endif()

add_dependencies(polyvr versionTarget)

if(NOT APPLE)
add_dependencies(polyvr freeglut)
endif()

if(APPLE)
#add_dependencies(polyvr cefResourceCopy)
# debug flags:
#set(COMPILER_FLAGS ${COMPILER_FLAGS} -fsanitize=address -fno-omit-frame-pointer -g -O1)
#target_link_options(polyvr PRIVATE -fsanitize=address) # for memory issues debugging
endif()

target_compile_options(polyvr PRIVATE ${COMPILER_FLAGS})
message(${LINKER_FLAGS})
if(NOT APPLE)
target_link_libraries(polyvr PRIVATE ${LINKER_FLAGS} freeglut)
else()
target_link_libraries(polyvr PRIVATE ${LINKER_FLAGS})
endif()
